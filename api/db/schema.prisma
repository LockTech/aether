datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  // See: https://redwoodjs.com/docs/services#validateuniqueness
  previewFeatures = ["interactiveTransactions"]
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  name  String

  billing     Billing?
  users       User[]
  userInvites UserInvite[]
}

model Billing {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId         String  @unique
  subscriptionActive Boolean @default(false)
  subscriptionId     String?
  subscriptionUnpaid Boolean @default(false)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @unique
}

enum UserRole {
  ADMIN
  MEMBER
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email               String    @unique
  name                String
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               UserRole  @default(MEMBER)

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?

  @@unique([id, organizationId], name: "tenant")
}

model UserInvite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  code      String   @unique
  confirmed Boolean  @default(false)
  email     String
  name      String?
  roles     UserRole @default(MEMBER)

  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?

  @@unique([id, organizationId], name: "tenant")
}
